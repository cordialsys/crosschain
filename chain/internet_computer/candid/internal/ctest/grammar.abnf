; Entry Point
TestData = 1*(Comment / Test / EndLine)

; Comments
Comment      = ("/*" Ws MultiComment Ws "*/") 
             / ("//" [CommentText]) EndLine
CommentText  = *(%x00-09 / %x0B-0C / %x0E-D7FF / %xE000-10FFFF)
MultiComment  = *(%x00-29 / %x2B-10FFFF / (%x2A (%x00-2E / %x30-10FFFF)) / EndLine)

Ws      = *(" " / %x09 / EndLine)
EndLine = %x0A / %x0D / (%x0D %x0A)

Test         = "assert " Input Ws (TestGoodTmpl / TestBadTmpl / TestTest) [1*" " Description] ";"

; A Candid service description, with valid candid syntax. Implementations should be able to parse them.
TestGoodTmpl = ":" Ws TestGood
TestGood     = ValuesBr

; A Candid service description, with invalid candid syntax. Implementations should reject parsing them.
TestBadTmpl  = "!:" Ws TestBad
TestBad      = ValuesBr

; A set of Candid tests, written in a grammar that extends the Candid type and value grammar.
TestTest     = "==" Ws Input Ws ":" Ws ValuesBr
ValuesBr     = "()" / "(" Values *(", " Values) ")"
Values       = Null / Bool / Nat / Int / Float / Text / Reserved / Empty / Opt

Null  = "null"
Bool  = "bool"
Nat   = "nat" [Base]
Int   = "int" [Base]
Float = "float" Base
Base  = 1*digit
Text  = "text"
Reserved = "reserved"
Empty    = "empty"
Opt      = "opt " Values

Input         = BlobInputTmpl / TextInputTmpl
TextInputTmpl = %x22 TextInput %x22
TextInput     = String

BlobInputTmpl = "blob " %x22 BlobInput %x22
BlobInput     = *(BlobAlpha / "\" BlobHex)
BlobAlpha = 1*(%x41-5A / %x61-7A) ; A-Z / a-z
BlobHex   = 2*2(%x30-39 / %x41-46 / %x61-66) ; 0-9 / A-F / a-f

Description = %x22 String %x22 ; "

String = *Char

Char          = EscapedDQuote / UChar
UChar         = %x20-21 / %x23-10FFFF  ; Any Unicode character except DQUOTE (")
EscapedDQuote = %x5C %x22

digit   = %x30-39 ; 0-9
hex     = digit / %x41-46 / %x61-66 ; A-F / a-f

